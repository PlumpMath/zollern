;; Utilities

(def (seq ?f ?start ?inc ?a)
  (?f ?a ?start))

(def (seq ?f ?start ?inc ?a ?b . ?rest)
  (begin (?f ?a ?start) (seq ?f (+ ?start ?inc) ?inc ?b . ?rest)))

(def (defenum . ?rest)
  (seq def 0 1 . ?rest))

(def (deftypedenum-from ?start ?type)
  (begin))

(def (deftypedenum-from ?start ?type ?member . ?rest)
  (begin
    (def ?member (?type ?start))
    (deftypedenum-from (+ ?start 1) ?type . ?rest)))

(def (deftypedenum ?type . ?members)
  (deftypedenum-from 0 ?type . ?members))

(def (<<<-accum ?accum)
  ?accum)

(def (<<<-accum ?accum ?val ?bits . ?rest)
  (<<<-accum (or (<< ?accum ?bits)
                 (and ?val (- (<< 1 ?bits) 1)))
             . ?rest))

(def (<<< . ?rest)
  (<<<-accum 0 . ?rest))

;; Registers

(deftypedenum reg
  r0  r1  r2  r3  r4  r5  r6  r7
  r8  r9 r10 r11 r12 r13 r14 r15)

;; Characters

(defenum
  ;; 0x00
  :nul :soh :stx :etx :eot :enq :ack :bel
  :bs  :ht  :nl  :vt  :np  :cr  :so  :si
  :dle :dc1 :dc2 :dc3 :dc4 :nak :syn :etb
  :can :em  :sub :esc :fs  :gs  :rs  :us

  ;; 0x20
  :spc :!   :dq  :#   :$   :%   :&   :sq
  :lp  :rp  :*   :+   :,   :-   :.   :/
  :0   :1   :2   :3   :4   :5   :6   :7
  :8   :9   ::   :sc  :<   :=   :>   :?

  ;; 0x40
  :@   :A   :B   :C   :D   :E   :F   :G
  :H   :I   :J   :K   :L   :M   :N   :O
  :P   :Q   :R   :S   :T   :U   :V   :W
  :X   :Y   :Z   :[   :bsl :]   :^   :_

  ;; 0x60
  :bt  :a   :b   :c   :d   :e   :f   :g
  :h   :i   :j   :k   :l   :m   :n   :o
  :p   :q   :r   :s   :t   :u   :v   :w
  :x   :y   :z   :{   :bar :}   :~   :del)

;; Instructions

(def (rex ?w ?r ?x ?b)
  (<<< 4 4 ?w 1 ?r 1 ?x 1 ?b 1))

(def (rex 0 0 0 0)
  (begin))

(def (mod/rm ?mod ?r ?m)
  (<<< ?mod 2 ?r 3 ?m 3))

;; register to register
(def (op/rr ?op ?dst ?src)
  (1 (rex 1 (>> ?src 3) 0 (>> ?dst 3)) ?op (mod/rm 3 ?src ?dst)))

;; (register) to register, register 12 and 13 need to be special
;; cased...

(def (op/rm ?w ?op ?dst ?src)
  (1 (rex ?w (>> ?dst 3) 0 (>> ?src 3)) ?op (mod/rm 0 ?dst ?src)))

(def (op/rm ?w ?op ?dst 4)
  (1 (rex ?w (>> ?dst 3) 0 (>> 4 3)) ?op (mod/rm 0 ?dst 4) 0x24))

(def (op/rm ?w ?op ?dst 5)
  (1 (rex ?w (>> ?dst 3) 0 (>> 5 3)) ?op (mod/rm 1 ?dst 5) 00))

(def (op/rm ?w ?op ?dst 12)
  (1 (rex ?w (>> ?dst 3) 0 (>> 12 3)) ?op (mod/rm 0 ?dst 12) 0x24))

(def (op/rm ?w ?op ?dst 13)
  (1 (rex ?w (>> ?dst 3) 0 (>> 13 3)) ?op (mod/rm 1 ?dst 13) 00))

(def (set (reg ?dst) ?val)
  (1 (rex 1 0 0 (>> ?dst 3)) 0xc7 (mod/rm 3 0 ?dst))
  (4 ?val))

(def (set (reg ?dst) (reg ?src))
  (op/rr 0x89 ?dst ?src))

(def (set (reg ?dst) (u8 (reg ?src)))
  (op/rm 0 (begin 0x0F 0xB6) ?dst ?src))

(def (set (reg ?dst) (u16 (reg ?src)))
  (op/rm 0 (begin 0x0F 0xB7) ?dst ?src))

(def (set (reg ?dst) (u32 (reg ?src)))
  (op/rm 0 0x8B ?dst ?src))

(def (set (reg ?dst) (u64 (reg ?src)))
  (op/rm 1 0x8B ?dst ?src))

(def (call ?addr)
  (1 0xe8)
  (-4 ?addr))

(def (ret)
  (1 0xc3))

(def (syscall)
  (1 0x0F 0x05))

;; Init

(code start
  (call main)
  (call exit))

;; Syscalls

;; Args go to r7, r6, r2, r10, r8, r9, number to r0.

(def (defsyscall ?func ?num)
  (code ?func
    (set r7 r0)
    (set r6 r1)
    (set r0 ?num)
    (syscall)
    (ret)))

(defsyscall write  1)
(defsyscall exit  60)

(code main
  (set r0 1)
  (set r1 message)
  (set r2 (- message:end message))
  (call write)
  (set r0 0)
  (ret))

(code
message
  (1 "Hello World" :nl)
message:end)
