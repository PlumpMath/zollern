;; Utilities

(def (seq ?f ?start ?inc)
  (begin))

(def (seq ?f ?start ?inc ?first . ?rest)
  (begin
    (?f ?first ?start)
    (seq ?f (+ ?start ?inc) ?inc . ?rest)))

(def (defenum . ?rest)
  (seq def 0 1 . ?rest))

(def (deftypedenum-from ?start ?type)
  (begin))

(def (deftypedenum-from ?start ?type ?member . ?rest)
  (begin
    (def ?member (?type ?start))
    (deftypedenum-from (+ ?start 1) ?type . ?rest)))

(def (deftypedenum ?type . ?members)
  (deftypedenum-from 0 ?type . ?members))

(def (<<<-accum ?accum)
  ?accum)

(def (<<<-accum ?accum ?val ?bits . ?rest)
  (<<<-accum (| (<< ?accum ?bits)
                (& ?val (- (<< 1 ?bits) 1)))
             . ?rest))

(def (<<< . ?rest)
  (<<<-accum 0 . ?rest))

;; Registers and calling convention
;;
;; Registerd l0-l8 must be saved by caller.  Registers x0-x4 and sp
;; must be saved by callee.  Register cp must be passed on unchanged
;; to all called functions.  Arguments are passed in l0-l8.  Results
;; are returned in l0-l8.  Register sp is the stack pointer, and cp is
;; the context pointer.
;;
;; "l0", for example, is the name for all 64 bits of register number
;; zero, and "l0.8" is the name for the least-significant 8 bits of
;; that register.  Similar for "l0.16" and "l0.32"

(def (defreg ?name ?num)
  (def ?name (reg ?num)))

(def (defreg (?name ?name.8 ?name.16 ?name.32) ?num)
  (def ?name (reg ?num))
  (def ?name.8 (reg ?num 8))
  (def ?name.16 (reg ?num 16))
  (def ?name.32 (reg ?num 32)))

(seq defreg 0 1
     (l0 l0.8 l0.16 l0.32)
     (l1 l1.8 l1.16 l1.32)
     (l2 l2.8 l2.16 l2.32)
     (x0 x0.8 x0.16 x0.32)
     sp
     cp
     (l3 l3.8 l3.16 l3.32)
     (l4 l4.8 l4.16 l4.32)
     (l5 l5.8 l5.16 l5.32)
     (l6 l6.8 l6.16 l6.32)
     (l7 l7.8 l7.16 l7.32)
     (l8 l8.8 l8.16 l8.32)
     (x1 x1.8 x1.16 x1.32)
     (x2 x2.8 x2.16 x2.32)
     (x3 x3.8 x3.16 x3.32)
     (x4 x4.8 x4.16 x4.32))

;; Characters

(defenum
  ;; 0x00
  :nul :soh :stx :etx :eot :enq :ack :bel
  :bs  :ht  :nl  :vt  :np  :cr  :so  :si
  :dle :dc1 :dc2 :dc3 :dc4 :nak :syn :etb
  :can :em  :sub :esc :fs  :gs  :rs  :us

  ;; 0x20
  :spc :!   :dq  :#   :$   :%   :&   :sq
  :lp  :rp  :*   :+   :,   :-   :.   :/
  :0   :1   :2   :3   :4   :5   :6   :7
  :8   :9   ::   :sc  :<   :=   :>   :?

  ;; 0x40
  :@   :A   :B   :C   :D   :E   :F   :G
  :H   :I   :J   :K   :L   :M   :N   :O
  :P   :Q   :R   :S   :T   :U   :V   :W
  :X   :Y   :Z   :[   :bsl :]   :^   :_

  ;; 0x60
  :bt  :a   :b   :c   :d   :e   :f   :g
  :h   :i   :j   :k   :l   :m   :n   :o
  :p   :q   :r   :s   :t   :u   :v   :w
  :x   :y   :z   :{   :bar :}   :~   :del)

;; Fundamental types

(def (deftype ?name ?size ?min ?max)
  (def (sizeof ?name) ?size)
  (def (min ?name) ?min)
  (def (max ?name) ?max))

(def (is? ?type ?val)
  (&& (<= (min ?type) ?val) (<= ?val (max ?type))))

(deftype u8 1     0 0xFF)
(deftype s8 1 -0x80 0x7F)

(deftype u16 2       0 0xFFFF)
(deftype s16 2 -0x8000 0x7FFF)

(deftype u32 4           0 0xFFFFFFFF)
(deftype s32 4 -0x80000000 0x7FFFFFFF)

(deftype u64 8                   0 0xFFFFFFFFFFFFFFFF)
(deftype s64 8 -0x8000000000000000 0x7FFFFFFFFFFFFFFF)

;; Structs

(def (defstruct-at ?name ?off)
  (def (sizeof ?name) ?off))

(def (defstruct-at ?name ?off (?type ?field) . ?rest)
  (defstruct-at ?name ?off (?type ?field 1) . ?rest))

(def (defstruct-at ?name ?off (?type ?field ?length) . ?rest)
  (begin
    (def (?field ??ptr) (?type ??ptr ?off))
    (defstruct-at ?name (+ ?off (* (sizeof ?type) ?length)) . ?rest)))

(def (defstruct ?name . ?rest)
  (defstruct-at ?name 0 . ?rest))

;; Instructions

(def (rex ?w ?r ?x ?b)
  (<<< 4 4 ?w 1 ?r 1 ?x 1 ?b 1))

;; inserts the rex prefix in the right place

(def (rex-op ?rex (1 . ?ops))
  (1 ?rex . ?ops))

(def (rex-op ?rex (1 0x40 . ?ops))
  (1 ?rex . ?ops))

(def (rex-op ?rex (1 0x66 . ?ops))
  (1 0x66 ?rex . ?ops))

(def (rex-op 0x40 ?op)
  ?op)

(def (mod/rm ?mod ?r ?m)
  (<<< ?mod 2 ?r 3 ?m 3))

(def (sib ?scale ?index ?base)
  (<<< ?scale 2 ?index 3 ?base 3))

;; Syntax for addresses:
;;
;; (type (reg base))
;; (type (reg base) offset)
;; (type1 (type2 (reg base) offset2) offset1)
;; (type (reg base) scale (reg index))
;; (type (reg base) scale (reg index) offset)

(def (log2 1) 0)
(def (log2 2) 1)
(def (log2 4) 2)
(def (log2 8) 3)

(def (inst-rr ?dst ?src ((w ?w) (op . ?op)))
  (rex-op (rex ?w (>> ?src 3) 0 (>> ?dst 3)) (1 . ?op))
  (1 (mod/rm 3 ?src ?dst)))

(def (inst-rr ?dst ?src ((w ?w) (op . ?op) (regs-reversed)))
  (inst-rr ?src ?dst ((w ?w) (op . ?op))))

(def (inst-ri ?size ?dst ?val ((w ?w) (x ?x) (op . ?op)))
  (rex-op (rex ?w (>> ?x 3) 0 (>> ?dst 3)) (1 . ?op))
  (1 (mod/rm 3 ?x ?dst))
  (?size ?val))

(def (inst-ri ?size ?dst ?val ((w ?w) (x dst) (op . ?op)))
  (inst-ri ?size ?dst ?val ((w ?w) (x ?dst) (op . ?op))))

(def (inst-ri ?size ?dst ?val ((w ?w) (op/reg ?op)))
  (1 (rex 1 0 0 (>> ?dst 3)) (+ ?op (& ?dst 7)))
  (?size ?val))

(def (inst-rm ?op ?reg ?type ((?type2 ?base ?offset2) ?offset1))
  (inst-rm ?op ?reg ?type (?base (+ ?offset2 ?offset1))))

(def (inst-rm ?op ?reg ?type (?addr))
  (inst-rm.pcrel ?op ?reg ?addr))

(def (inst-rm ?op ?reg ?type ((reg ?base)))
  (inst-rm ?op ?reg ?type ((reg ?base) 0)))

(def (inst-rm ?op ?reg ?type ((reg ?base) ?offset))
  (inst-rm ?op ?reg ?type ((reg ?base) 0 (reg 0) ?offset)))

(def (inst-rm ?op ?reg ?type ((reg ?base) (reg ?index)))
  (inst-rm ?op ?reg ?type ((reg ?base) (sizeof ?type) (reg ?index) 0)))

(def (inst-rm ?op ?reg ?type ((reg ?base) (reg ?index) ?offset))
  (inst-rm ?op ?reg ?type ((reg ?base) (sizeof ?type) (reg ?index) ?offset)))

(def (inst-rm ?op ?reg ?type ((reg ?base) ?scale (reg ?index)))
  (inst-rm ?op ?reg ?type ((reg ?base) ?scale (reg ?index) 0)))

(def (inst-rm ?op ?reg ?type ((reg ?base) ?scale (reg ?index) ?offset))
  (sel (== ?index 4) (error "sp can't be index")
                     (begin))
  (sel (== ?scale 0)
       (sel (== (& ?base 7) 4)
            (inst-rm.rbiso ?op ?reg ?base 4 1 ?offset)
            (inst-rm.rbo ?op ?reg ?base ?offset))
       (inst-rm.rbiso ?op ?reg ?base ?index ?scale ?offset)))

(def (inst-rm.rbo ((w ?w) (op . ?op)) ?reg ?base ?offset)
  (rex-op (rex ?w (>> ?reg 3) 0 (>> ?base 3))
          (1 . ?op))
  (sel (&& (== ?offset 0) (!= (& ?base 7) 5))
       (begin
         (1 (mod/rm 0 ?reg ?base)))
       (is? s8 ?offset)
       (begin
         (1 (mod/rm 1 ?reg ?base) ?offset))
       (is? s32 ?offset)
       (begin
         (1 (mod/rm 2 ?reg ?base))
         (4 ?offset))))

(def (inst-rm.rbiso ((w ?w) (op . ?op)) ?reg ?base ?index ?scale ?offset)
  (rex-op (rex ?w (>> ?reg 3) (>> ?index 3) (>> ?base 3))
          (1 . ?op))
  (sel (&& (== ?offset 0) (!= (& ?base 7) 5))
       (begin
         (1 (mod/rm 0 ?reg 4)
            (sib (log2 ?scale) ?index ?base)))
       (is? s8 ?offset)
       (begin
         (1 (mod/rm 1 ?reg 4)
            (sib (log2 ?scale) ?index ?base)
            ?offset))
       (is? s32 ?offset)
       (begin
         (1 (mod/rm 2 ?reg 4)
            (sib (log2 ?scale) ?index ?base))
         (4 ?offset))))

(def (inst-rm.pcrel ((w ?w) (op . ?op)) ?reg ?addr)
  (rex-op (rex ?w (>> ?reg 3) 0 0) (1 . ?op))
  (1 (mod/rm 0 ?reg 5))
  (-4 ?addr))

;; Defining instructions
;;
;; Because of how macro expansion works, immediates must come first.

(def (def-inst ?name . ?rest)
  (def-inst-0 ?name . ?rest))

;; Immediates

(def (def-inst-0 ?name . ?rest)
  (def-inst-1 ?name . ?rest))

(def (def-inst-0 ?name
       ((?type i8) (w ?w) (x ?x) (op . ?op))
       . ?rest)
  (def (?name (?type . ??addr) ??val)
       (inst-rm ((w ?w) (op . ?op)) ?x ?type ??addr)
       (1 ??val))
  (def-inst-0 ?name . ?rest))

(def (def-inst-0 ?name
       ((?type i32) (w ?w) (x ?x) (op . ?op))
       . ?rest)
  (def (?name (?type . ??addr) ??val)
       (inst-rm ((w ?w) (op . ?op)) ?x ?type ??addr)
       (4 ??val))
  (def-inst-0 ?name . ?rest))

(def (def-inst-0 ?name
       ((reg i8) . ?op8)
       . ?rest)
  (def (?name (reg ??dst) ??val)
       (inst-ri 1 ??dst ??val ?op8))
  (def-inst-0 ?name . ?rest))

(def (def-inst-0 ?name
       ((reg i8) . ?op8)
       ((reg i32) . ?op32)
       . ?rest)
  (def (?name (reg ??dst) ??val)
       (sel (is? s8  ??val) (inst-ri 1 ??dst ??val ?op8)
            (is? s32 ??val) (inst-ri 4 ??dst ??val ?op32)))
  (def-inst-0 ?name . ?rest))

(def (def-inst-0 ?name
       ((reg i32) . ?op32)
       . ?rest)
  (def (?name (reg ??dst) ??val)
       (inst-ri 4 ??dst ??val ?op32))
  (def-inst-0 ?name . ?rest))

(def (def-inst-0 ?name
       ((reg i32) . ?op32)
       ((reg i64) . ?op64)
       . ?rest)
  (def (?name (reg ??dst) ??val)
       (sel (is? s32 ??val) (inst-ri 4 ??dst ??val ?op32)
                            (inst-ri 8 ??dst ??val ?op64)))
  (def-inst-0 ?name . ?rest))

;; Rest

(def (def-inst-1 ?name
       ((reg ?type) . ?op)
       . ?rest)
  (def (?name (reg ??dst) (?type . ??addr))
       (inst-rm ?op ??dst ?type ??addr))
  (def-inst-1 ?name . ?rest))

(def (def-inst-1 ?name
       ((?type reg) . ?op)
       . ?rest)
  (def (?name (?type . ??addr) (reg ??src))
       (inst-rm ?op ??src ?type ??addr))
  (def-inst-1 ?name . ?rest))

(def (def-inst-1 ?name
       ((reg mem) . ?op)
       . ?rest)
  (def (?name (reg ??dst) (??type . ??addr))
       (inst-rm ?op ??dst ??type ??addr))
  (def-inst-1 ?name . ?rest))

(def (def-inst-1 ?name
       ((reg reg) . ?op)
       . ?rest)
  (def (?name (reg ??dst) (reg ??src))
       (inst-rr ??dst ??src ?op))
  (def-inst-1 ?name . ?rest))

(def (def-inst-1 ?name
       ((reg)   (w ?w) (x ?x) (op . ?op))
       . ?rest)
  (def (?name (reg ??reg))
       (rex-op (rex ?w 0 0 (>> ??reg 3)) (1 . ?op))
       (1 (mod/rm 3 ?x ??reg)))
  (def-inst-1 ?name . ?rest))

(def (def-inst-1 ?name
       ((reg)   (w ?w) (op/reg ?op))
       . ?rest)
  (def (?name (reg ??reg))
       (rex-op (rex ?w 0 0 (>> ??reg 3)) (1 (+ ?op (& ??reg 7)))))
  (def-inst-1 ?name . ?rest))

(def (def-inst-1 ?name
       ((reg)   (w ?w) (op/reg ?op1 ?op2))
       . ?rest)
  (def (?name (reg ??reg))
       (rex-op (rex ?w 0 0 (>> ??reg 3)) (1 ?op1 (+ ?op2 (& ??reg 7)))))
  (def-inst-1 ?name . ?rest))

(def (def-inst-1 ?name
       ((reg (reg ?fixed))   (w ?w) (x ?x) (op . ?op))
       . ?rest)
  (def (?name (reg ??reg) (reg ?fixed))
       (rex-op (rex ?w 0 0 (>> ??reg 3)) (1 . ?op))
       (1 (mod/rm 3 ?x ??reg)))
  (def-inst-1 ?name . ?rest))

(def (def-inst-1 ?name
       ((d32)   (op . ?op))
       . ?rest)
  (def (?name ??val)
       (1 . ?op) (-4 ??val))
  (def-inst-1 ?name . ?rest))

(def (def-inst-1 ?name
       (()   (w ?w) (op . ?op))
       . ?rest)
  (def (?name)
       (rex-op (rex ?w 0 0 0) (1 . ?op)))
  (def-inst-1 ?name . ?rest))

(def (def-inst-1 ?name))

;; Setting registers

(def-inst set
  ((reg i32)   (w 1) (x 0) (op     0xC7))
  ((reg i64)   (w 1)       (op/reg 0xB8))
  (( u8  i8)   (w 0) (x 0) (op     0xC6))
  ((u32 i32)   (w 0) (x 0) (op     0xC7))
  ((u64 i32)   (w 1) (x 0) (op     0xC7))
  (( s8  i8)   (w 0) (x 0) (op     0xC6))
  ((s32 i32)   (w 0) (x 0) (op     0xC7))
  ((s64 i32)   (w 1) (x 0) (op     0xC7))
  ((reg reg)   (w 1)       (op     0x89))
  ((reg  u8)   (w 0)       (op     0x0F 0xB6))
  ((reg u16)   (w 0)       (op     0x0F 0xB7))
  ((reg u32)   (w 0)       (op     0x8B))
  ((reg u64)   (w 1)       (op     0x8B))
  ((reg  s8)   (w 1)       (op     0x0F 0xBE))
  ((reg s16)   (w 1)       (op     0x0F 0xBf))
  ((reg s32)   (w 1)       (op     0x63))
  ((reg s64)   (w 1)       (op     0x8B))
  (( u8 reg)   (w 0)       (op     0x40 0x88))
  ((u16 reg)   (w 0)       (op     0x66 0x89))
  ((u32 reg)   (w 0)       (op     0x89))
  ((u64 reg)   (w 1)       (op     0x89))
  (( s8 reg)   (w 0)       (op     0x40 0x88))
  ((s16 reg)   (w 0)       (op     0x66 0x89))
  ((s32 reg)   (w 0)       (op     0x89))
  ((s64 reg)   (w 1)       (op     0x89)))

(def-inst let
  ((reg mem)   (w 1) (op 0x8D)))

(def (defsetcc ?name ?op)
  (def (?name (reg ??dst 8))
       (rex-op (rex 0 0 0 (>> ??dst 3)) (1 0x0F ?op (+ 0xC0 (& ??dst 7))))))

(defsetcc sete  0x94)
(defsetcc setne 0x95)
(defsetcc setl  0x9C)
(defsetcc setle 0x9E)
(defsetcc setg  0x9F)
(defsetcc setge 0x9D)

;; Addition

(def-inst add
  ((reg  i8)   (w 1) (x 0) (op 0x83))
  ((reg i32)   (w 1) (x 0) (op 0x81))
  (( u8  i8)   (w 0) (x 0) (op 0x80))
  ((u32 i32)   (w 0) (x 0) (op 0x81))
  ((u64 i32)   (w 1) (x 0) (op 0x81))
  (( s8  i8)   (w 0) (x 0) (op 0x80))
  ((s32 i32)   (w 0) (x 0) (op 0x81))
  ((s64 i32)   (w 1) (x 0) (op 0x81))
  ((reg reg)   (w 1)       (op 0x01))
  (( u8 reg)   (w 0)       (op 0x00))
  ((u16 reg)   (w 0)       (op 0x66 0x01))
  ((u32 reg)   (w 0)       (op 0x01))
  ((u64 reg)   (w 1)       (op 0x01))
  (( s8 reg)   (w 0)       (op 0x00))
  ((s16 reg)   (w 0)       (op 0x66 0x01))
  ((s32 reg)   (w 0)       (op 0x01))
  ((s64 reg)   (w 1)       (op 0x01)))

;; Subtraction

(def-inst sub
  ((reg  i8)   (w 1) (x 5) (op 0x83))
  ((reg i32)   (w 1) (x 5) (op 0x81))
  ((reg reg)   (w 1)       (op 0x29)))

;; Multiplication

(def-inst mul
  ((reg  i8)   (w 1) (x dst) (op 0x6B))
  ((reg i32)   (w 1) (x dst) (op 0x69))
  ((reg reg)   (w 1)         (op 0x0F 0xAF) (regs-reversed)))

(def-inst neg
  ((reg)       (w 1) (x 3)   (op 0xF7)))

(def-inst umul
  ((reg)       (w 1) (x 4)   (op 0xF7)))

(def-inst smul
  ((reg)       (w 1) (x 5)   (op 0xF7)))

;; Division

(def-inst sign-extend
  (()          (w 1) (op 0x99)))

(def-inst udiv
  ((reg)       (w 1) (x 6) (op 0xF7)))

(def-inst sdiv
  ((reg)       (w 1) (x 7) (op 0xF7)))

;; Bit twiddling

(def-inst and
  ((reg  i8)   (w 1) (x 4) (op 0x83))
  ((reg i32)   (w 1) (x 4) (op 0x81))
  ((reg reg)   (w 1)       (op 0x21)))

(def-inst or
  ((reg  i8)   (w 1) (x 1) (op 0x83))
  ((reg i32)   (w 1) (x 1) (op 0x81))
  ((reg reg)   (w 1)       (op 0x09)))

(def-inst xor
  ((reg  i8)   (w 1) (x 6) (op 0x83))
  ((reg i32)   (w 1) (x 6) (op 0x81))
  ((reg reg)   (w 1)       (op 0x31)))

(def-inst not
  ((reg)       (w 1) (x 2) (op 0xF7)))

;; Shifting

(def-inst shl
  ((reg i8)      (w 1) (x 4) (op 0xC1))
  ((reg)         (w 1) (x 4) (op 0xD1))
  ((reg (reg 1)) (w 1) (x 4) (op 0xD3)))

(def-inst shr
  ((reg i8)      (w 1) (x 5) (op 0xC1))
  ((reg)         (w 1) (x 5) (op 0xD1))
  ((reg (reg 1)) (w 1) (x 5) (op 0xD3)))

(def-inst sar
  ((reg i8)      (w 1) (x 7) (op 0xC1))
  ((reg)         (w 1) (x 7) (op 0xD1))
  ((reg (reg 1)) (w 1) (x 7) (op 0xD3)))

;; Comparison

(def-inst cmp
  ((reg  i8)     (w 1) (x 7) (op 0x83))
  ((reg i32)     (w 1) (x 7) (op 0x81))
  ((u8   i8)     (w 0) (x 7) (op 0x80))
  ((u32 i32)     (w 0) (x 7) (op 0x81))
  ((u64 i32)     (w 1) (x 7) (op 0x81))
  ((s8   i8)     (w 0) (x 7) (op 0x80))
  ((s32 i32)     (w 0) (x 7) (op 0x81))
  ((s64 i32)     (w 1) (x 7) (op 0x81))
  ((s8   i8)     (w 0) (x 7) (op 0x80))
  ((reg reg)     (w 1)       (op 0x39)))

;; Stack

(def-inst push
  ((reg)         (w 0) (op/reg 0x50)))

(def-inst pop
  ((reg)         (w 0) (op/reg 0x58)))

;; Jumping and calling

(def-inst jmp
  ((d32)         (op 0xE9))
  ((reg)         (w 0) (op/reg 0xFF 0xE0)))

(def-inst je
  ((d32)         (op 0x0F 0x84)))

(def-inst jne
  ((d32)         (op 0x0F 0x85)))

(def-inst jl
  ((d32)         (op 0x0F 0x8C)))

(def-inst jle
  ((d32)         (op 0x0F 0x8E)))

(def-inst jg
  ((d32)         (op 0x0F 0x8F)))

(def-inst jge
  ((d32)         (op 0x0F 0x8D)))

(def-inst ja
  ((d32)         (op 0x0F 0x87)))

(def-inst jae
  ((d32)         (op 0x0F 0x83)))

(def-inst jb
  ((d32)         (op 0x0F 0x82)))

(def-inst jbe
  ((d32)         (op 0x0F 0x86)))

(def-inst call
  ((d32)         (op 0xE8))
  ((reg)         (w 0) (op/reg 0xFF 0xD0)))

(def-inst ret
  (()            (w 0) (op 0xC3)))

;; Init

(code start
  (jmp main))
