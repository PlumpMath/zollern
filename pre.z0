;; Utilities

(def (seq ?f ?start ?inc)
  (begin))

(def (seq ?f ?start ?inc ?first . ?rest)
  (begin
    (?f ?first ?start)
    (seq ?f (+ ?start ?inc) ?inc . ?rest)))

(def (defenum . ?rest)
  (seq def 0 1 . ?rest))

(def (deftypedenum-from ?start ?type)
  (begin))

(def (deftypedenum-from ?start ?type ?member . ?rest)
  (begin
    (def ?member (?type ?start))
    (deftypedenum-from (+ ?start 1) ?type . ?rest)))

(def (deftypedenum ?type . ?members)
  (deftypedenum-from 0 ?type . ?members))

(def (<<<-accum ?accum)
  ?accum)

(def (<<<-accum ?accum ?val ?bits . ?rest)
  (<<<-accum (| (<< ?accum ?bits)
                (& ?val (- (<< 1 ?bits) 1)))
             . ?rest))

(def (<<< . ?rest)
  (<<<-accum 0 . ?rest))

;; Registers and calling convention
;;
;; Registerd l0-l8 must be saved by caller.  Registers x0-x5 and sp
;; must be saved by callee.  Arguments are passed in l0-l8.  Results
;; are returned in l0-l8.  Register sp is the stack pointer.

(deftypedenum reg
  l0  l1  l2  x0  sp  x1  l3  l4
  l5  l6  l7  l8  x2  x3  x4  x5)

;; Characters

(defenum
  ;; 0x00
  :nul :soh :stx :etx :eot :enq :ack :bel
  :bs  :ht  :nl  :vt  :np  :cr  :so  :si
  :dle :dc1 :dc2 :dc3 :dc4 :nak :syn :etb
  :can :em  :sub :esc :fs  :gs  :rs  :us

  ;; 0x20
  :spc :!   :dq  :#   :$   :%   :&   :sq
  :lp  :rp  :*   :+   :,   :-   :.   :/
  :0   :1   :2   :3   :4   :5   :6   :7
  :8   :9   ::   :sc  :<   :=   :>   :?

  ;; 0x40
  :@   :A   :B   :C   :D   :E   :F   :G
  :H   :I   :J   :K   :L   :M   :N   :O
  :P   :Q   :R   :S   :T   :U   :V   :W
  :X   :Y   :Z   :[   :bsl :]   :^   :_

  ;; 0x60
  :bt  :a   :b   :c   :d   :e   :f   :g
  :h   :i   :j   :k   :l   :m   :n   :o
  :p   :q   :r   :s   :t   :u   :v   :w
  :x   :y   :z   :{   :bar :}   :~   :del)

;; Fundamental types

(def (deftype ?name ?size ?min ?max)
  (def (sizeof ?name) ?size)
  (def (min ?name) ?min)
  (def (max ?name) ?max))

(def (is? ?type ?val)
  (&& (<= (min ?type) ?val) (<= ?val (max ?type))))

(deftype u8 1     0 0xFF)
(deftype s8 1 -0x80 0x7F)

(deftype u16 2       0 0xFFFF)
(deftype s16 2 -0x8000 0x7FFF)

(deftype u32 4           0 0xFFFFFFFF)
(deftype s32 4 -0x80000000 0x7FFFFFFF)

(deftype u64 8                   0 0xFFFFFFFFFFFFFFFF)
(deftype s64 8 -0x8000000000000000 0x7FFFFFFFFFFFFFFF)

;; Structs

(def (defstruct-at ?name ?off)
  (def (sizeof ?name) ?off))

(def (defstruct-at ?name ?off (?type ?field) . ?rest)
  (begin
    (def (?field ??ptr) (?type ??ptr ?off))
    (defstruct-at ?name (+ ?off (sizeof ?type)) . ?rest)))

(def (defstruct ?name . ?rest)
  (defstruct-at ?name 0 . ?rest))

;; Instructions

(def (rex ?w ?r ?x ?b)
  (<<< 4 4 ?w 1 ?r 1 ?x 1 ?b 1))

(def (rex 0 0 0 0)
  (begin))

(def (mod/rm ?mod ?r ?m)
  (<<< ?mod 2 ?r 3 ?m 3))

(def (sib ?scale ?index ?base)
  (<<< ?scale 2 ?index 3 ?base 3))

(def (addr-rr ?r ?m)
  (1 (mod/rm 3 ?r ?m)))

(def (addr-rb ?reg ?base)
  (sel (== (& ?base 7) 4) (1 (mod/rm 0 ?reg 4) (sib 0 4 4))
       (== (& ?base 7) 5) (1 (mod/rm 1 ?reg ?base) 0)
                          (1 (mod/rm 0 ?reg ?base))))

(def (addr-rbo8 ?reg ?base ?off)
  (sel (== (& ?base 7) 4) (1 (mod/rm 1 ?reg 4) (sib 0 4 4) ?off)
                          (1 (mod/rm 1 ?reg ?base) ?off)))

(def (addr-rbo32 ?reg ?base ?off)
  (sel (== (& ?base 7) 4) (begin
                            (1 (mod/rm 2 ?reg 4) (sib 0 4 4))
                            (4 ?off))
                          (begin
                            (1 (mod/rm 2 ?reg ?base))
                            (4 ?off))))

(def (addr-rbi ?reg ?base ?index ?scale)
  (1 (mod/rm 0 ?reg 4) (sib (log2 ?scale) ?index ?base)))

;; Instructions with both operands in a register.

(def (inst-rr ?w ?op ?a ?b)
  (1 (rex ?w (>> ?a 3) 0 (>> ?b 3)))
  ?op
  (addr-rr ?a ?b))

;; Instructions with one operand in a register and the other in
;; memory.  This also defines the syntax for addresses:
;;
;; (type (reg base))
;; (type (reg base) offset)
;; (type1 (type2 (reg base) offset2) offset1)
;; (type (reg base) scale (reg index))
;; (type (reg base) scale (reg index) offset)

(def (inst-rm ?w ?op ?reg (reg ?base))
  (inst-rm ?w ?op ?reg (reg ?base) 0))

(def (inst-rm ?w ?op ?reg (?type2 ?base ?offset2) ?offset1)
  (inst-rm ?w ?op ?reg ?base (+ ?offset2 ?offset1)))

(def (inst-rm ?w ?op ?reg (reg ?base) ?offset)
  (inst-rm ?w ?op ?reg (reg ?base) 0 (reg 0) ?offset))

(def (inst-rm ?w ?op ?reg (reg ?base) ?scale (reg ?index) ?offset)
  (1 (rex ?w (>> ?reg 3) (>> ?index 3) (>> ?base 3)))
  ?op
  (sel (== ?scale 0)
       (sel (== ?offset 0)    (addr-rb ?reg ?base)
            (is? s8 ?offset)  (addr-rbo8 ?reg ?base ?offset)
            (is? s32 ?offset) (addr-rbo32 ?reg ?base ?offset))
       (sel (== ?offset 0)    (addr-rbi ?reg ?base ?index ?scale))))

(def (set (reg ?dst) ?val)
  (sel (! (is? s32 ?val))
       (begin
         (1 (rex 1 0 0 (>> ?dst 3)) (+ 0xb8 (& ?dst 7)))
         (8 ?val))
       (begin
         (1 (rex 1 0 0 (>> ?dst 3)) 0xc7 (mod/rm 3 0 ?dst))
         (4 ?val))))

(def (set (reg ?dst) (reg ?src))
  (inst-rr 1 (1 0x89) ?src ?dst))

;; Load unsigned

(def (set (reg ?dst) (u8 . ?addr))
  (inst-rm 0 (1 0x0F 0xB6) ?dst . ?addr))

(def (set (reg ?dst) (u16 . ?addr))
  (inst-rm 0 (1 0x0F 0xB7) ?dst . ?addr))

(def (set (reg ?dst) (u32 . ?addr))
  (inst-rm 0 (1 0x8B) ?dst . ?addr))

(def (set (reg ?dst) (u64 . ?addr))
  (inst-rm 1 (1 0x8B) ?dst . ?addr))

;; Load signed

(def (set (reg ?dst) (s8 . ?addr))
  (inst-rm 1 (1 0x0F 0xBE) ?dst . ?addr))

(def (set (reg ?dst) (s16 . ?addr))
  (inst-rm 1 (1 0x0F 0xBF) ?dst . ?addr))

(def (set (reg ?dst) (s32 . ?addr))
  (inst-rm 1 (1 0x63) ?dst . ?addr))

(def (set (reg ?dst) (s64 . ?addr))
  (inst-rm 1 (1 0x8B) ?dst . ?addr))

;; Storing

(def (set (u8 . ?addr) (reg ?src))
  (inst-rm 0 (1 0x88) ?src . ?addr))

(def (set (u16 . ?addr) (reg ?src))
  (1 0x66) (inst-rm 0 (1 0x89) ?src . ?addr))

(def (set (u32 . ?addr) (reg ?src))
  (inst-rm 0 (1 0x89) ?src . ?addr))

(def (set (u64 . ?addr) (reg ?src))
  (inst-rm 1 (1 0x89) ?src . ?addr))

(def (set (s8 . ?addr) (reg ?src))
  (set (u8 . ?addr) (reg ?src)))

(def (set (s16 . ?addr) (reg ?src))
  (set (u16 . ?addr) (reg ?src)))

(def (set (s32 . ?addr) (reg ?src))
  (set (u32 . ?addr) (reg ?src)))

(def (set (s64 . ?addr) (reg ?src))
  (set (u64 . ?addr) (reg ?src)))

;; Addition

(def (add (reg ?dst) ?val)
  (1 (rex 1 0 0 (>> ?dst 3)) 0x81 (mod/rm 3 0 ?dst))
  (4 ?val))

(def (add (reg ?dst) (reg ?src))
  (inst-rr 1 (1 0x01) ?src ?dst))

;; Subtraction

(def (sub (reg ?dst) ?val)
  (1 (rex 1 0 0 (>> ?dst 3)) 0x81 (mod/rm 3 5 ?dst))
  (4 ?val))

(def (sub (reg ?dst) (reg ?src))
  (inst-rr 1 (1 0x29) ?src ?dst))

;; Comparison

(def (cmp (reg ?reg) ?val)
  (1 (rex 1 0 0 (>> ?reg 3)) 0x81 (mod/rm 3 7 ?reg))
  (4 ?val))

(def (cmp (reg ?dst) (reg ?src))
  (inst-rr 1 (1 0x39) ?src ?dst))

;; Stack

(def (push (reg ?reg))
  (1 (rex 0 0 0 (>> ?reg 3)) (<<< 10 5 ?reg 3)))

(def (pop (reg ?reg))
  (1 (rex 0 0 0 (>> ?reg 3)) (<<< 11 5 ?reg 3)))

;; Jumping and calling

(def (jmp ?addr)
  (1 0xe9) (-4 ?addr))

(def (je ?addr)
  (1 0x74) (-1 ?addr))

(def (jne ?addr)
  (1 0x75) (-1 ?addr))

(def (jl ?addr)
  (1 0x7C) (-1 ?addr))

(def (jle ?addr)
  (1 0x7E) (-1 ?addr))

(def (jg ?addr)
  (1 0x7F) (-1 ?addr))

(def (jge ?addr)
  (1 0x7D) (-1 ?addr))

(def (call ?addr)
  (1 0xe8) (-4 ?addr))

(def (ret)
  (1 0xc3))

;; Init

(code start
  (jmp main))
