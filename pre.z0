;; Utilities

(def (seq ?f ?start ?inc)
  (begin))

(def (seq ?f ?start ?inc ?first . ?rest)
  (begin
    (?f ?first ?start)
    (seq ?f (+ ?start ?inc) ?inc . ?rest)))

(def (defenum . ?rest)
  (seq def 0 1 . ?rest))

(def (deftypedenum-from ?start ?type)
  (begin))

(def (deftypedenum-from ?start ?type ?member . ?rest)
  (begin
    (def ?member (?type ?start))
    (deftypedenum-from (+ ?start 1) ?type . ?rest)))

(def (deftypedenum ?type . ?members)
  (deftypedenum-from 0 ?type . ?members))

(def (<<<-accum ?accum)
  ?accum)

(def (<<<-accum ?accum ?val ?bits . ?rest)
  (<<<-accum (| (<< ?accum ?bits)
                (& ?val (- (<< 1 ?bits) 1)))
             . ?rest))

(def (<<< . ?rest)
  (<<<-accum 0 . ?rest))

;; Registers and calling convention
;;
;; Registerd l0-l8 must be saved by caller.  Registers x0-x5 and sp
;; must be saved by callee.  Arguments are passed in l0-l8.  Results
;; are returned in l0-l8.  Register sp is the stack pointer.

(deftypedenum reg
  l0  l1  l2  x0  sp  x1  l3  l4
  l5  l6  l7  l8  x2  x3  x4  x5)

;; Characters

(defenum
  ;; 0x00
  :nul :soh :stx :etx :eot :enq :ack :bel
  :bs  :ht  :nl  :vt  :np  :cr  :so  :si
  :dle :dc1 :dc2 :dc3 :dc4 :nak :syn :etb
  :can :em  :sub :esc :fs  :gs  :rs  :us

  ;; 0x20
  :spc :!   :dq  :#   :$   :%   :&   :sq
  :lp  :rp  :*   :+   :,   :-   :.   :/
  :0   :1   :2   :3   :4   :5   :6   :7
  :8   :9   ::   :sc  :<   :=   :>   :?

  ;; 0x40
  :@   :A   :B   :C   :D   :E   :F   :G
  :H   :I   :J   :K   :L   :M   :N   :O
  :P   :Q   :R   :S   :T   :U   :V   :W
  :X   :Y   :Z   :[   :bsl :]   :^   :_

  ;; 0x60
  :bt  :a   :b   :c   :d   :e   :f   :g
  :h   :i   :j   :k   :l   :m   :n   :o
  :p   :q   :r   :s   :t   :u   :v   :w
  :x   :y   :z   :{   :bar :}   :~   :del)

;; Fundamental types

(def (deftype ?name ?size ?min ?max)
  (def (sizeof ?name) ?size)
  (def (min ?name) ?min)
  (def (max ?name) ?max)
  (def (?name (reg ??ptr)) (?name (reg ??ptr) 0))
  (def (?name (??type ??ptr ??off1) ??off2) (?name ??ptr (+ ??off1 ??off2))))

(def (is? ?type ?val)
  (&& (<= (min ?type) ?val) (<= ?val (max ?type))))

(deftype u8 1     0 0xFF)
(deftype s8 1 -0x80 0x7F)

(deftype u16 2       0 0xFFFF)
(deftype s16 2 -0x8000 0x7FFF)

(deftype u32 4           0 0xFFFFFFFF)
(deftype s32 4 -0x80000000 0x7FFFFFFF)

(deftype u64 8                   0 0xFFFFFFFFFFFFFFFF)
(deftype s64 8 -0x8000000000000000 0x7FFFFFFFFFFFFFFF)

;; Structs

(def (defstruct-at ?name ?off)
  (def (sizeof ?name) ?off))

(def (defstruct-at ?name ?off (?type ?field) . ?rest)
  (begin
    (def (?field ??ptr) (?type ??ptr ?off))
    (defstruct-at ?name (+ ?off (sizeof ?type)) . ?rest)))

(def (defstruct ?name . ?rest)
  (defstruct-at ?name 0 . ?rest))

;; Instructions

(def (rex ?w ?r ?x ?b)
  (<<< 4 4 ?w 1 ?r 1 ?x 1 ?b 1))

(def (rex 0 0 0 0)
  (begin))

(def (mod/rm ?mod ?r ?m)
  (<<< ?mod 2 ?r 3 ?m 3))

(def (mod-00 ?r ?m)
  (mod/rm 0 ?r ?m))

(def (mod-00 ?r 4)
  (begin (mod/rm 0 ?r 4) 0x24))

(def (mod-00 ?r 5)
  (begin (mod/rm 1 ?r 5) 0x00))

(def (mod-00 ?r 12)
  (begin (mod/rm 0 ?r 4) 0x24))

(def (mod-00 ?r 13)
  (begin (mod/rm 1 ?r 5) 0x00))

(def (mod-01 ?r ?m)
  (mod/rm 1 ?r ?m))

(def (mod-01 ?r 4)
  (begin (mod/rm 1 ?r 4) 0x24))

(def (mod-01 ?r 12)
  (begin (mod/rm 1 ?r 4) 0x24))

(def (mod-10 ?r ?m)
  (mod/rm 2 ?r ?m))

(def (mod-10 ?r 4)
  (begin (mod/rm 2 ?r 4) 0x24))

(def (mod-10 ?r 12)
  (begin (mod/rm 2 ?r 4) 0x24))

(def (mod-11 ?r ?m)
  (mod/rm 3 ?r ?m))

(def (modop ?mod ?op ?w ?a ?b)
  (1 (rex ?w (>> ?a 3) 0 (>> ?b 3)) ?op (?mod ?a ?b)))

;; register a direct, register b direct
(def (op-rr ?op ?w ?a ?b)
  (modop mod-11 ?op ?w ?a ?b))

;; register a direct, register b indirect with offset
(def (op-rro ?op ?w ?a ?b ?off)
  (sel (== ?off 0)
       (modop mod-00 ?op ?w ?a ?b)
       (is? s8 ?off)
       (begin
         (modop mod-01 ?op ?w ?a ?b)
         (1 ?off))
       (is? s32 ?off)
       (begin
         (modop mod-10 ?op ?w ?a ?b)
         (4 ?off))))

(def (set (reg ?dst) ?val)
  (sel (! (is? s32 ?val))
       (begin
         (1 (rex 1 0 0 (>> ?dst 3)) (+ 0xb8 (& ?dst 7)))
         (8 ?val))
       (begin
         (1 (rex 1 0 0 (>> ?dst 3)) 0xc7 (mod-11 0 ?dst))
         (4 ?val))))

(def (set (reg ?dst) (reg ?src))
  (op-rr 0x89 1 ?src ?dst))

;; Load unsigned

(def (set (reg ?dst) (u8 (reg ?src) ?off))
  (op-rro (begin 0x0F 0xB6) 0 ?dst ?src ?off))

(def (set (reg ?dst) (u16 (reg ?src) ?off))
  (op-rro (begin 0x0F 0xB7) 0 ?dst ?src ?off))

(def (set (reg ?dst) (u32 (reg ?src) ?off))
  (op-rro 0x8B 0 ?dst ?src ?off))

(def (set (reg ?dst) (u64 (reg ?src) ?off))
  (op-rro 0x8B 1 ?dst ?src ?off))

;; Load signed

(def (set (reg ?dst) (s8 (reg ?src) ?off))
  (op-rro (begin 0x0F 0xBE) 1 ?dst ?src ?off))

(def (set (reg ?dst) (s16 (reg ?src) ?off))
  (op-rro (begin 0x0F 0xBF) 1 ?dst ?src ?off))

(def (set (reg ?dst) (s32 (reg ?src) ?off))
  (op-rro 0x63 1 ?dst ?src ?off))

(def (set (reg ?dst) (s64 (reg ?src) ?off))
  (op-rro 0x8B 1 ?dst ?src ?off))

;; Storing

(def (set (u8 (reg ?dst) ?off) (reg ?src))
  (op-rro 0x88 0 ?src ?dst ?off))

(def (set (u16 (reg ?dst) ?off) (reg ?src))
  (1 0x66) (op-rro 0x89 0 ?src ?dst ?off))

(def (set (u32 (reg ?dst) ?off) (reg ?src))
  (op-rro 0x89 0 ?src ?dst ?off))

(def (set (u64 (reg ?dst) ?off) (reg ?src))
  (op-rro 0x89 1 ?src ?dst ?off))

(def (set (s8 (reg ?dst) ?off) (reg ?src))
  (set (u8 (reg ?dst) ?off) (reg ?src)))

(def (set (s16 (reg ?dst) ?off) (reg ?src))
  (set (u16 (reg ?dst) ?off) (reg ?src)))

(def (set (s32 (reg ?dst) ?off) (reg ?src))
  (set (u32 (reg ?dst) ?off) (reg ?src)))

(def (set (s64 (reg ?dst) ?off) (reg ?src))
  (set (u64 (reg ?dst) ?off) (reg ?src)))

;; Addition

(def (add (reg ?dst) ?val)
  (1 (rex 1 0 0 (>> ?dst 3)) 0x81 (mod-11 0 ?dst))
  (4 ?val))

(def (add (reg ?dst) (reg ?src))
  (op-rr 0x01 1 ?src ?dst))

;; Subtraction

(def (sub (reg ?dst) ?val)
  (1 (rex 1 0 0 (>> ?dst 3)) 0x81 (mod-11 5 ?dst))
  (4 ?val))

(def (sub (reg ?dst) (reg ?src))
  (op-rr 0x29 1 ?src ?dst))

;; Comparison

(def (cmp (reg ?reg) ?val)
  (1 (rex 1 0 0 (>> ?reg 3)) 0x81 (mod-11 7 ?reg))
  (4 ?val))

(def (cmp (reg ?dst) (reg ?src))
  (op-rr 0x39 1 ?src ?dst))

;; Stack

(def (push (reg ?reg))
  (1 (rex 0 0 0 (>> ?reg 3)) (<<< 10 5 ?reg 3)))

(def (pop (reg ?reg))
  (1 (rex 0 0 0 (>> ?reg 3)) (<<< 11 5 ?reg 3)))

;; Jumping and calling

(def (jmp ?addr)
  (1 0xe9)
  (-4 ?addr))

(def (jne ?addr)
  (1 0x75)
  (-1 ?addr))

(def (call ?addr)
  (1 0xe8)
  (-4 ?addr))

(def (ret)
  (1 0xc3))

;; Init

(code start
  (jmp main))
