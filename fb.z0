(def -fb-pixels-fd   3)
(def -fb-commands-fd 4)
(def -fb-events-fd   5)

(def -fb-op-conf 1)
(def -fb-op-show 2)

(def -fb-width  512)
(def -fb-height 512)
(def -fb-row-shift 9)

(data fb-pixels 8)

(code fb-init
  (set l0 -fb-pixels-fd)
  (set l1 (* -fb-width -fb-height 4))
  (call sys-ftruncate)
  (cmp l0 0)
  (jl .error)
  (set l0 0)
  (set l1 (* -fb-width -fb-height 4))
  (set l2 3) ; PROT_READ | PROT_WRITE
  (set l3 1) ; MAP_SHARED
  (set l4 -fb-pixels-fd)
  (set l5 0)
  (call sys-mmap)
  (set l1 fb-pixels)
  (set (u64 l1) l0)
  (set l1 0)
  (set l2 0xFFFFFF)
  (jmp .test)
.loop
  (set (u32 l0 l1) l2)
  (add l1 1)
.test
  (cmp l1 (* -fb-width -fb-height))
  (jl .loop)
  (set l0 -fb-op-conf)
  (set l1 -fb-width)
  (set l2 -fb-height)
  (call -fb-command)
  (ret)
.error
  (set l0 12)
  (jmp sys-exit))

(defstruct -fb-command-struct
  (u32 cmd.op)
  (u32 cmd.arg1)
  (u32 cmd.arg2)
  (u32 cmd.arg3))

(data -fb-command-buffer (sizeof -fb-command-struct))

(code -fb-command
  (set l5 -fb-command-buffer)
  (set (cmd.op   l5) l0)
  (set (cmd.arg1 l5) l1)
  (set (cmd.arg2 l5) l2)
  (set (cmd.arg3 l5) l3)
  (set l0 -fb-commands-fd)
  (set l1 l5)
  (set l2 (sizeof -fb-command-struct))
  (jmp sys-write))

(code fb-show
  (set l0 -fb-op-show)
  (jmp -fb-command))

(defstruct fb-event-struct
  (u16 ev.type)
  (u16 ev.x)
  (u16 ev.y)
  (u16 ev.state)
  (u32 ev.input))

(code fb-read-event
  (set l1 l0)
  (set l0 -fb-events-fd)
  (set l2 (sizeof fb-event-struct))
  (jmp sys-read))

(data -fb-event-buffer (sizeof fb-event-struct))

(code fb-wait-and-quit
  (call fb-show)
  (push x0)
  (set x0 -fb-event-buffer)
.loop
  (set l0 x0)
  (call fb-read-event)
  (set l0 (ev.type x0))
  (cmp l0 1) ; QUIT
  (jne .loop)
  (pop x0)
  (set l0 0)
  (jmp sys-exit))

(defstruct fb-font
  (u64 font.glyphs)
  (u8  font.ascent)
  (u8  font.descent))

(defstruct fb-glyph-header
  (u8 glyph.width)
  (u8 glyph.height)
  (s8 glyph.offset-x)
  (s8 glyph.offset-y)
  (u8 glyph.advance)
  (u8 glyph.unused-1)
  (u8 glyph.unused-2)
  (u8 glyph.unused-3))

(code fb-glyph
  ;; l0 < font
  ;; l1 < x
  ;; l2 < y
  ;; l3 < codepoint
  ;;
  ;; l0 > advance

  (push x0)
  (push x1)

  ;; Validate codepoint
  (cmp l3 127)
  (jbe .maybe-good-codepoint)
.bad-codepoint
  (set l3 32)
.maybe-good-codepoint
  (set l4 (font.glyphs l0))
  (set l4 (u64 l4 l3))
  (cmp l4 0)
  (je .bad-codepoint)

  (set x0 fb-pixels)
  (set x0 (u64 x0))

  ;; Copy glyph
  (set l5 (glyph.offset-x l4))
  (add l1 l5)
  (set l5 (glyph.offset-y l4))
  (add l2 l5)
  (shl l2 -fb-row-shift)
  (add l1 l2)
  (set l8 (glyph.height l4))
  (set x1 l4)
  (add x1 (sizeof fb-glyph-header))
  (jmp .test-y)
.loop-y
  (set l6 0)
  (set l5 (glyph.width l4))
  (jmp .test-x)
.loop-x
  (set l7 (u8 x1 l6))
  (neg l7)
  (add l7 255)
  (mul l7 0x010101)
  (set (u32 x0 l1) l7)
  (add l6 1)
  (add l1 1)
.test-x
  (cmp l6 l5)
  (jl .loop-x)
  (add l1 -fb-width)
  (sub l1 l5)
  (set l5 (glyph.width l4))
  (add x1 l5)
  (sub l8 1)
.test-y
  (cmp l8 0)
  (jne .loop-y)

  (set l0 (glyph.advance l4))

  (pop x1)
  (pop x0)
  (ret))
