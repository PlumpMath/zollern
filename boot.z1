;; A macro for defining primitives.
;;
;; We have to write this without any convenience helpers...
;;
;; (defprim NAME A)
;; =>
;; (0
;;   (1 ($nn form) ($prim-1 form A))
;;   (2 NAME 0 $nn))
;;
;; (defprim NAME A B)
;; =>
;; (0
;;   (1 ($nn form) ($prim-2 form A B))
;;   (2 NAME 0 $nn))

(1 ($prim-1 form a)
   (comp:make-pair
    (comp:make-number a)
    (comp:rest form)))

(1 ($prim-2 form a b)
   (comp:make-pair
    (comp:make-number a)
    (comp:make-pair
     (comp:make-number b)
     (comp:rest form))))

(1 ($defprim form)
   (0
    (9 gensym) (10 gensym (comp:gensym))
    (9 name-cell) (10 name-cell (comp:rest form))
    (9 a-cell) (10 a-cell (comp:rest name-cell))
    (9 b-cell) (10 b-cell (comp:rest a-cell))
    (comp:make-pair
     (comp:make-number 0)
     (comp:make-pair
      (comp:make-pair
       (comp:make-number 1)
       (comp:make-pair
        (comp:make-pair
         gensym
         (comp:make-pair
          (comp:intern "form")
          0)))
       (comp:make-pair
        (comp:make-pair
         (5 b-cell (comp:intern "$prim-2") (comp:intern "$prim-1"))
         (comp:make-pair
          (comp:intern "form")
          (comp:make-pair
           (comp:first a-cell)
           (5 b-cell
              (comp:make-pair
               (comp:first b-cell)
               0)
              0))))
        0))
      (comp:make-pair
       (comp:make-pair
        (comp:make-number 2)
        (comp:make-pair
         (comp:first name-cell)
         (comp:make-pair
          (comp:make-number 0)
          (comp:make-pair
           gensym
           0)))
        0)
       0)))))
(2 defprim 0 $defprim)

;; Primitives
;;
;; Some primitives are okay for direct use, but some need to be
;; wrapped in nicer clothing, like 'fun' and 'var'.

(defprim begin      0)
(defprim prim-fun   1)
(defprim prim-mac   2)
(defprim label      3)
(defprim goto       4)
(defprim if         5)
(defprim prim-var   9)
(defprim set       10)
(defprim loc       11)

(defprim  u8     12 0)
(defprim u16     12 1)
(defprim u32     12 2)
(defprim u64     12 3)
(defprim  s8     12 4)
(defprim s16     12 5)
(defprim s32     12 6)
(defprim s64     12 7)

(defprim prim-neg   6 0)
(defprim not        6 1)

(defprim ==         7 0)
(defprim !=         7 1)
(defprim <          7 2)
(defprim <=         7 3)
(defprim >          7 4)
(defprim >=         7 5)

(defprim +          8 0)
(defprim -          8 1)
(defprim *          8 2)
(defprim /          8 3)

;; Enhanced versions of some primitives

;; (var NAME)
;; =>
;; (prim-var NAME)
;;
;; (var NAME INIT)
;; =>
;; (begin
;;  (prim-var NAME)
;;  (set NAME INIT))

(prim-fun ($var form)
  (begin
    (prim-var name)
    (set name (comp:first (comp:rest form)))
    (prim-var decl)
    (set decl (comp:make-pair
               (comp:intern "prim-var")
               (comp:make-pair
                name
                0)))
    (prim-var maybe-init)
    (set maybe-init (comp:rest (comp:rest form)))
    (if maybe-init
        (comp:make-pair
         (comp:intern "begin")
         (comp:make-pair
          decl
          (comp:make-pair
           (comp:make-pair
            (comp:intern "set")
            (comp:make-pair
             name
             (comp:make-pair
              (comp:first maybe-init)
              0)))
           0)))
        decl)))
(prim-mac var 0 $var)

;; Main

(prim-fun (fac n)
  (if (< n 2)
      n
      (* n (fac (- n 1)))))

(prim-fun (main)
  (begin
    (var n 5)
    (var m (loc n))
    (fac (s64 m))
    (goto foo)
    (label foo)))
