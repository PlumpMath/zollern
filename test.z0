(code main
  ;; add/sub immediate
  (set l0 0)
  (assert-eq l0 0)
  (sub l0 1)
  (assert-eq l0 -1)
  (add l0 0x7FFFFFFF)
  (assert-eq l0 0x7FFFFFFE)
  (set l0 -1)
  (add l0 1)
  (assert-eq l0 0)

  ;; add/sub reg
  (set l1 13)
  (set l0 12)
  (add l0 l1)
  (assert-eq l0 25)
  (sub l0 l1)
  (sub l0 l1)
  (assert-eq l0 -1)

  ;; load unsigned
  (set l1 data-inc)
  (set l0 -1)
  (set l0 (u8 l1))
  (assert-eq l0 0x12)
  (set l0 -1)
  (set l0 (u16 l1))
  (assert-eq l0 0x3412)
  (set l0 -1)
  (set l0 (u32 l1))
  (assert-eq l0 0x78563412)
  (set l0 -1)
  (set l0 (u64 l1))
  (assert-eq l0 0x7856341278563412)

  ;; load unsigned
  (set l1 data-all-ones)
  (set l0 -1)
  (set l0 (u8 l1))
  (assert-eq l0 0xFF)
  (set l0 -1)
  (set l0 (u16 l1))
  (assert-eq l0 0xFFFF)
  (set l0 -1)
  (set l0 (u32 l1))
  (assert-eq l0 0xFFFFFFFF)
  (set l0 0)
  (set l0 (u64 l1))
  (assert-eq l0 0xFFFFFFFFFFFFFFFF)

  ;; load signed
  (set l1 data-all-ones)
  (set l0 -1)
  (set l0 (s8 l1))
  (assert-eq l0 -1)
  (set l0 -1)
  (set l0 (s16 l1))
  (assert-eq l0 -1)
  (set l0 -1)
  (set l0 (s32 l1))
  (assert-eq l0 -1)
  (set l0 0)
  (set l0 (s64 l1))
  (assert-eq l0 -1)

  ;; load with offset
  (set l1 data-inc)
  (set l0 -1)
  (set l0 (u8 l1 1))
  (assert-eq l0 0x34)
  (set l1 (+ data-inc 0x1234))
  (set l0 -1)
  (set l0 (u8 l1 -0x1234))
  (assert-eq l0 0x12)

  ;; store
  (set l1 buf)
  (set l2 0x7654341276543412)
  (set l0 (u64 l1))
  (assert-eq l0 0)
  (set (u8 l1) l2)
  (set l0 (u64 l1))
  (assert-eq l0 0x12)
  (set (u16 l1) l2)
  (set l0 (u64 l1))
  (assert-eq l0 0x3412)
  (set (u32 l1) l2)
  (set l0 (u64 l1))
  (assert-eq l0 0x76543412)
  (set (u64 l1) l2)
  (set l0 (u64 l1))
  (assert-eq l0 0x7654341276543412)

  ;; store 'signed'
  (set l1 buf)
  (set l2 0x7654341276543412)
  (set l0 0)
  (set (u64 l1) l0)
  (set (s8 l1) l2)
  (set l0 (u64 l1))
  (assert-eq l0 0x12)
  (set (s16 l1) l2)
  (set l0 (u64 l1))
  (assert-eq l0 0x3412)
  (set (s32 l1) l2)
  (set l0 (u64 l1))
  (assert-eq l0 0x76543412)
  (set (s64 l1) l2)
  (set l0 (u64 l1))
  (assert-eq l0 0x7654341276543412)

  ;; store with offset
  (set l1 buf)
  (set l2 0x7654341276543412)
  (set l0 0)
  (set (u64 l1) l0)
  (set (u8 l1 1) l2)
  (set l0 (u64 l1))
  (assert-eq l0 0x1200)
  (set l1 (+ buf 0x1234))
  (set (u8 l1 -0x1234) l2)
  (set l1 buf)
  (set l0 (u64 l1))
  (assert-eq l0 0x1212)

  ;; funny encodings for sp (rsp), x1 (rbp), x2 (r12), and x3 (r13)
  (set x1 sp)
  (set sp data-inc)
  (set l0 -1)
  (set l0 (u8 sp))
  (set sp x1)
  (assert-eq l0 0x12)
  (set x1 data-inc)
  (set l0 -1)
  (set l0 (u8 x1))
  (assert-eq l0 0x12)
  (set x2 data-inc)
  (set l0 -1)
  (set l0 (u8 x2))
  (assert-eq l0 0x12)
  (set x3 data-inc)
  (set l0 -1)
  (set l0 (u8 x3))
  (assert-eq l0 0x12)

  ;; cmp/jne
  (set l0 12)
  (cmp l0 13)
  (jne .ok1)
  (assert-fail)
.ok1
  (set l1 13)
  (cmp l0 l1)
  (jne .ok2)
  (assert-fail)
.ok2

  ;; push/pop
  (set l1 14)
  (set l0 0)
  (push l1)
  (pop l0)
  (assert-eq l0 14)

  ;; call/ret
  (call sub-1234)
  (assert-eq l0 1234)

  ;; jmp
  (jmp .ok4)
  (assert-fail)
.ok3
  (jmp .ok5)
  (assert-fail)
.ok4
  (jmp .ok3)
  (assert-fail)
.ok5

  ;; rbp/rsp
  (set x1 1234)
  (set l0 x1)
  (assert-eq l0 1234)
  (set x1 sp)
  (set sp 5678)
  (set l0 sp)
  (set sp x1)
  (assert-eq l0 5678)

  ;; registers
  (set x5 12345678)
  (set x4 x5)
  (set x3 x4)
  (set x2 x3)
  (set x1 x2)
  (set x0 x1)
  (set l8 x0)
  (set l7 l8)
  (set l6 l7)
  (set l5 l6)
  (set l4 l5)
  (set l3 l4)
  (set l2 l3)
  (set l1 l2)
  (set l0 l1)
  (assert-eq l0 12345678)

  (set x5 1)
  (set x4 2)
  (set x3 3)
  (set x2 4)
  (set x1 5)
  (set x0 6)
  (set l8 7)
  (set l7 8)
  (set l6 9)
  (set l5 10)
  (set l4 11)
  (set l3 12)
  (set l2 13)
  (set l1 14)
  (set l0 15)
  (add l0 l1)
  (add l0 l2)
  (add l0 l3)
  (add l0 l4)
  (add l0 l5)
  (add l0 l6)
  (add l0 l7)
  (add l0 l8)
  (add l0 x0)
  (add l0 x1)
  (add l0 x2)
  (add l0 x3)
  (add l0 x4)
  (add l0 x5)
  (assert-eq l0 (+ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))
  (sub l0 l1)
  (sub l0 l2)
  (sub l0 l3)
  (sub l0 l4)
  (sub l0 l5)
  (sub l0 l6)
  (sub l0 l7)
  (sub l0 l8)
  (sub l0 x0)
  (sub l0 x1)
  (sub l0 x2)
  (sub l0 x3)
  (sub l0 x4)
  (sub l0 x5)
  (assert-eq l0 15)

  ;; structs

  (defstruct foo
    (u16 foo.a)
    (s16 foo.b))

  (defstruct bar
    (u32 bar.a)
    (foo bar.b))

  (set l1 buf)
  (set l2 0x12345678)
  (set (u32 l1 0) l2)
  (set l2 0x8765)
  (set (u16 l1 4) l2)
  (set l2 -1234)
  (set (s16 l1 6) l2)
  (set l0 -1)
  (set l0 (bar.a l1))
  (assert-eq l0 0x12345678)
  (set l0 (foo.a (bar.b l1)))
  (assert-eq l0 0x8765)
  (set l0 (foo.b (bar.b l1)))
  (assert-eq l0 -1234)

  (PASS))

(code sub-1234
  (set l0 1234)
  (ret))

(code data-inc
  (1 0x12 0x34 0x56 0x78 0x12 0x34 0x56 0x78))

(code data-all-ones
  (1 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF))

(data buf 8)
