;;
;; Z1 -- bootstrap compiler
;;
;; This is a bad compiler for the Zollern core language and part of
;; its run-time support, written in the Z0 bootstrap language.

;; The Zollern core language is very small but has powerful extension
;; mechanisms.

;;; Debug output

(fun (dbg-chars buf len)
  (syscall 1 2 buf len))

(mem dbg-char-buf 1)

(fun (dbg-char ch)
  (b@= dbg-char-buf ch)
  (dbg-chars dbg-char-buf 1))

(fun (dbg-nibble n)
  (goto hex (> n 9))
  (dbg-char (+ n 48))
  (return)
hex
  (dbg-char (+ n 65 -10)))

(fun (dbg-byte b)
  (var hi (/ b 16))
  (var lo (- b (* hi 16)))
  (dbg-nibble hi)
  (dbg-nibble lo))

(fun (dbg-strlen s)
  (var l 0)
again
  (goto done (not (b@ s l)))
  (= l (+ l 1))
  (goto again)
done
  (return l))

(fun (dbg-str s)
  (dbg-chars s (dbg-strlen s))
  (dbg-char 10))

;;; Aborting

(fun (abort)
  (syscall 60 1))

(fun (abort-if-not cond)
  (goto out cond)
  (abort)
out)

;;; Input

;; The bootstrap compiler only reads from stdin, with a simple buffer.

(const input-bufsize 1024)
(const input-eof -1)

(mem input-buf input-bufsize)
(var input-cur)
(var input-end)

(fun (input-fillbuf)
  (var n (syscall 0 0 input-buf input-bufsize))
  (abort-if-not (>= n 0))
  (= input-cur input-buf)
  (= input-end (+ input-buf n)))

(fun (input)
  (var r)
  (goto non-empty (< input-cur input-end))
  (input-fillbuf)
  (goto non-empty (< input-cur input-end))
  (return input-eof)
non-empty
  (= r (b@ input-cur))
  (= input-cur (+ input-cur 1))
  (return r))

(fun (input-undo)
  (goto empty-buf (== input-cur input-buf))
  (= input-cur (- input-cur 1))
empty-buf)

;;; Tokenization

(const token-eof -1)
(const token-symbol 0)
(const token-punct 1)
(const token-inum 2)
(const token-dnum 3)
(const token-string 4)

(const token-max 512)
(mem token token-max)
(var token-type)

(fun (skip-whitespace)
  (var c)
again
  (= c (input))
  (goto again (== c 32))
  (goto again (== c 9))
  (goto again (== c 10))
  (goto comment (== c 59))
  (input-undo)
  (return)
comment
  (= c (input))
  (goto again (== c 10))
  (goto comment))

(fun (read-token)
  (var c)
  (var t 0)
  (skip-whitespace)
  (= c (input))
  (goto eof (== c input-eof))
  (goto punct (== c 40))
  (goto punct (== c 41))
  (goto symbol)
eof
  (= token-type token-eof)
  (return)
punct
  (b@= token t c)
  (b@= token (+ t 1) 0)
  (= token-type token-punct)
  (return)
symbol
  (goto symbol-done (== c input-eof))
  (goto symbol-done (== c 32))
  (goto symbol-done (== c 9))
  (goto symbol-done (== c 10))
  (goto symbol-done (== c 59))
  (goto symbol-done (== c 40))
  (goto symbol-done (== c 41))
  (b@= token t c)
  (= t (+ t 1))
  (= c (input))
  (goto symbol)
symbol-done
  (input-undo)
  (b@= token t 0)
  (= token-type token-symbol)
  (return))

;;; Main

(fun (main)
again
  (read-token)
  (goto done (== token-type token-eof))
  (dbg-str token)
  (goto again)
done)
