;;; Z1 compiler

(code abort
  (call print)
  (set l0 125)
  (jmp sys-exit))

;; Memory
;;
;; (data p (sizeof mem-pool))
;;
;; (mem-pool-init p pool-size)
;; (mem-pool-alloc p size)
;; (mem-pool-reset p)
;; (mem-pool-destroy p)

(defstruct mem-pool
  (u64 mp-start)
  (u64 mp-end)
  (u64 mp-next))

(code mem-pool-init
  (push x1)
  (push x2)
  (set x1 l0)
  (set x2 l1)
  (set l0 0)
  (set l2 3) ; PROT_READ | PROT_WRITE
  (set l3 0x22) ; MAP_ANONYMOUS | MAP_PRIVATE
  (set l4 0)
  (set l5 0)
  (call sys-mmap)
  (cmp l0 0)
  (jl .err)
  (set (mp-start x1) l0)
  (set (mp-next x1) l0)
  (add l0 x2)
  (set (mp-end x1) l0)
  (pop x2)
  (pop x1)
  (ret)
.err
  (set l0 .message)
  (jmp abort)
.message
  (1 "Can't get memory\n" 0))

(code mem-pool-alloc
  (set l2 (mp-next l0))
  (add l1 l2)
  (set l3 (mp-end l0))
  (cmp l1 l3)
  (jge .oom)
  (set (mp-next l0) l1)
  (set l0 l2)
  (ret)
.oom
  (set l0 .message)
  (call print)
  (set l0 13)
  (jmp sys-exit)
.message
  (1 "Out of pool memory\n" 0))

(code mem-pool-reset
  (set l1 (mp-start l0))
  (set (mp-next l0) l1)
  (ret))

(code mem-pool-destroy
  (set l1 (mp-end l0))
  (set l0 (mp-start l0))
  (sub l1 l0)
  (jmp sys-munmap))

;; Reading files

;; (file-open fb name)
;; (file-close fb)

(defstruct file-buffer
  (u64 fb-start)
  (u64 fb-end)
  (u64 fb-ptr))

(code file-open
  (push x0)
  (push x1)
  (set x1 l0)
  (sub sp (sizeof sys-fstat-buf))
  (set l0 l1)
  (set l1 0)
  (call sys-open)
  (cmp l0 0)
  (jl .err)
  (set x0 l0)
  (set l1 sp)
  (call sys-fstat)
  (cmp l0 0)
  (jl .err)
  (set l0 0)
  (set l1 (st_size sp))
  (set l2 1) ; PROT_READ
  (set l3 2) ; MAP_PRIVATE
  (set l4 x0)
  (set l5 0)
  (call sys-mmap)
  (cmp l0 0)
  (jl .err)
  (set (fb-start x1) l0)
  (set (fb-ptr x1) l0)
  (set l1 (st_size sp))
  (add l0 l1)
  (set (fb-end x1) l0)
  (add sp (sizeof sys-fstat-buf))
  (set l0 x0)
  (call sys-close)
  (pop x1)
  (pop x0)
  (ret)
.err
  (set l0 .message)
  (jmp abort)
.message
  (1 "Can't read file\n" 0))

(code file-close)

;; Tokens

(defstruct token-struct
  (u64 tk-buf)
  (u8  tk-kind))

(def tk-kind-eof    0)
(def tk-kind-open   1)
(def tk-kind-close  2)
(def tk-kind-symbol 3)
(def tk-kind-string 4)

(def (getchar ?dst ?ptr ?end ?eof-label)
  (cmp ?ptr ?end)
  (jge ?eof-label)
  (set ?dst (u8 ?ptr))
  (add ?ptr 1))

(code next-token
  ;; l0: file-buffer
  ;; l1: token-struct
  ;;
  ;; Reads the next token from file-buffer l0 into token-struct l1.
  ;;
  (set l2 (fb-ptr l0))
  (set l3 (fb-end l0))
.skip-whitespace
  (getchar l4 l2 l3 .eof)
  (cmp l4 :spc)
  (jle .skip-whitespace)
  (cmp l4 :sc)
  (jne .not-comment)
.skip-comment
  (getchar l4 l2 l3 .eof)
  (cmp l4 :nl)
  (je .skip-whitespace)
  (jmp .skip-comment)
.not-comment
  (cmp l4 :lp)
  (jne .not-open)
  (set l5 tk-kind-open)
  (jmp .out)
.not-open
  (cmp l4 :rp)
  (jne .not-close)
  (set l5 tk-kind-close)
  (jmp .out)
.not-close
  (cmp l4 :dq)
  (jne .not-string)
  (set l5 (tk-buf l1))
.next-string-char
  (getchar l4 l2 l3 .eof-in-string)
  (cmp l4 :dq)
  (je .end-string)
  (cmp l4 :bs)
  (jne .store-string-char)
  (getchar l4 l2 l3 .eof-in-string)
  (cmp l4 :bs)
  (je .store-string-char)
  (cmp l4 :dq)
  (je .store-string-char)
  (cmp l4 :n)
  (jne .not-newline-escape)
  (set l4 :nl)
  (jmp .store-string-char)
.not-newline-escape
  (cmp l4 :t)
  (jne .store-string-char)
  (set l4 :ht)
.store-string-char
  (set (u8 l5) l4)
  (add l5 1)
  (jmp .next-string-char)
.end-string
  (set l4 0)
  (set (u8 l5) l4)
  (set l5 tk-kind-string)
  (jmp .out)
.not-string
  (set l5 (tk-buf l1))
.store-sym-char
  (set (u8 l5) l4)
  (add l5 1)
  (getchar l4 l2 l3 .end-symbol)
  (cmp l4 :spc)
  (jle .end-symbol-put-back)
  (cmp l4 :lp)
  (je .end-symbol-put-back)
  (cmp l4 :rp)
  (je .end-symbol-put-back)
  (jmp .store-sym-char)
.end-symbol-put-back
  (sub l2 1)
.end-symbol
  (set l4 0)
  (set (u8 l5) l4)
  (set l5 tk-kind-symbol)
  (jmp .out)
.eof
  (set l5 tk-kind-eof)
.out
  (set (tk-kind l1) l5)
  (set (fb-ptr l0) l2)
  (ret)
.eof-in-string
  (set l0 .eof-in-string-message)
  (jmp abort)
.eof-in-string-message
  (1 "Unexpected end of file in string\n" 0))

;; Expressions

(def EXP-POOL-SIZE (* 10 1024 1024))
(def EXP-HASH-SIZE 1023)

(data
  exp-pool (sizeof mem-pool)
  exp-symbols (sizeof u64)
  exp-token-buf 1024
  exp-token (sizeof token-struct))

(def exp-type-pair   0)
(def exp-type-symbol 1)
(def exp-type-string 2)
(def exp-type-number 3)

(defstruct exp-base
  (u32 exp-type))

(defstruct exp-symbol
  (exp-base base)
  (u64 exp-sym-link))

(defstruct exp-string
  (exp-base base))

(defstruct exp-pair
  (exp-base base)
  (u64 exp-first)
  (u64 exp-rest))

(defstruct exp-number
  (exp-base base)
  (s64 exp-num-val))

(code exp-init
  (set l0 exp-pool)
  (set l1 EXP-POOL-SIZE)
  (call mem-pool-init)
  (jmp exp-reset))

(code exp-reset
  (set l0 exp-pool)
  (set l1 (mp-start l0))
  (set (mp-next l1) l0)
  (set l1 (* EXP-HASH-SIZE (sizeof u64)))
  (call mem-pool-alloc)
  (set l1 exp-symbols)
  (set (u64 l1) l0)
  (set l1 EXP-HASH-SIZE)
  (set l2 0)
  (jmp .test)
.loop
  (set (u64 l0) l2)
  (add l0 (sizeof u64))
  (sub l1 1)
.test
  (cmp l1 0)
  (jg .loop)
  (ret))

(code exp-make-pair
  (push x0)
  (push x1)
  (set x0 l0)
  (set x1 l1)
  (set l0 exp-pool)
  (set l1 (sizeof exp-pair))
  (call mem-pool-alloc)
  (set l1 exp-type-pair)
  (set (exp-type l0) l1)
  (set (exp-first l0) x0)
  (set (exp-rest l0) x1)
  (pop x1)
  (pop x0)
  (ret))

(code exp-make-with-string
  ;; l0 - string
  ;; l1 - header size
  (push x0)
  (push x1)
  (push x2)
  (set x0 l0)
  (set x1 l1)
  (call strlen)
  (add l0 1)
  (add l0 x1)
  (set l1 l0)
  (set l0 exp-pool)
  (call mem-pool-alloc)
  (set x2 l0)
  (add l0 x1)
  (set l1 x0)
  (call strcpy)
  (set l0 x2)
  (pop x2)
  (pop x1)
  (pop x0)
  (ret))

(code exp-make-string
  ;; l0 - string
  (set l1 (sizeof exp-string))
  (call exp-make-with-string)
  (set l1 exp-type-string)
  (set (exp-type l0) l1)
  (ret))

(code exp-intern
  ;; l0 - name
  (push x0) ;; name
  (push x1) ;; hash(name)
  (push x2) ;; candidate symbol
  (set x0 l0)
  ;; compute hash of x0
  (set l0 5381)
  (set l1 x0)
.hash-loop
  (set l2 (u8 l1))
  (cmp l2 0)
  (je .hash-done)
  (mul l0 33)
  (xor l0 l2)
  (add l1 1)
  (jmp .hash-loop)
.hash-done
  (set l2 0)
  (set l1 EXP-HASH-SIZE)
  (sdiv l1)
  (set x1 l2)
  (set l0 exp-symbols)
  (set l0 (u64 l0))
  (set x2 (u64 l0 x1))
  (jmp .find-test)
.find-loop
  (set x2 (exp-sym-link x2))
.find-test
  (set l0 x2)
  (cmp l0 0)
  (je .not-found)
  (add l0 (sizeof exp-symbol))
  (set l1 x0)
  (call streq)
  (cmp l0 0)
  (je .find-loop)
  (set l0 x2)
  (pop x2)
  (pop x1)
  (pop x0)
  (ret)
.not-found
  (set l0 x0)
  (set l1 (sizeof exp-symbol))
  (call exp-make-with-string)
  (set l1 exp-type-symbol)
  (set (exp-type l0) l1)
  (set l1 exp-symbols)
  (set l1 (u64 l1))
  (set l2 (u64 l1 x1))
  (set (exp-sym-link l0) l2)
  (set (u64 l1 x1) l0)
  (pop x2)
  (pop x1)
  (pop x0)
  (ret))

(code exp-list-reverse
  (set l1 0)
.loop
  (cmp l0 0)
  (je .done)
  (set l2 (exp-rest l0))
  (set (exp-rest l0) l1)
  (set l1 l0)
  (set l0 l2)
  (jmp .loop)
.done
  (set l0 l1)
  (ret))

(code exp-read
  (set l1 token)
  (set l2 token-buf)
  (set (tk-buf l1) l2)
  (push x0)
  (push x1)
  (set x0 l0)
  (set x1 l1)
  (call next-token)
  (call .read1)
  (pop x1)
  (pop x0)
  (ret)
.read1
  (set l0 (tk-kind x1))
  (cmp l0 tk-kind-open)
  (jne .not-open)
  (push x2)
  (set x2 0)
.list-loop
  (set l0 x0)
  (set l1 x1)
  (call next-token)
  (set l0 (tk-kind x1))
  (cmp l0 tk-kind-eof)
  (je .eof-in-list)
  (cmp l0 tk-kind-close)
  (je .list-done)
  (call .read1)
  (set l1 x2)
  (call exp-make-pair)
  (set x2 l0)
  (jmp .list-loop)
.eof-in-list
  (set l0 .eof-in-list-message)
  (jmp abort)
.eof-in-list-message
  (1 "Unexpected end of file in list\n" 0)
.list-done
  (set l0 x2)
  (call exp-list-reverse)
  (pop x2)
  (ret)
.not-open
  (cmp l0 tk-kind-symbol)
  (jne .not-symbol)
  (set l0 (tk-buf x1))
  (jmp exp-intern)
.not-symbol
  (cmp l0 tk-kind-eof)
  (jne .not-eof)
  (set l0 0)
  (ret)
.not-eof
  (set l0 (tk-buf x1))
  (jmp exp-make-string))

(code exp-write
  (cmp l0 0)
  (jne .not-empty-list)
  (set l0 .empty-list-string)
  (jmp print)
.empty-list-string
  (1 "()" 0)
.not-empty-list
  (set l1 (exp-type l0))
  (cmp l1 exp-type-pair)
  (jne .not-list)
.list
  (push x0)
  (set x0 l0)
  (set l0 .open-paren-string)
  (call print)
  (jmp .list-loop-no-space)
.list-loop
  (set l0 .space-string)
  (call print)
.list-loop-no-space
  (set l0 (exp-first x0))
  (call exp-write)
  (set x0 (exp-rest x0))
  (cmp x0 0)
  (je .list-done)
  (set l0 (exp-type x0))
  (cmp l0 exp-type-pair)
  (je .list-loop)
  (set l0 .improper-end-string)
  (call print)
  (set l0 x0)
  (call exp-write)
.list-done
  (pop x0)
  (set l0 .close-paren-string)
  (jmp print)
.open-paren-string
  (1 "(" 0)
.space-string
  (1 " " 0)
.close-paren-string
  (1 ")" 0)
.improper-end-string
  (1 " . " 0)
.not-list
  (cmp l1 exp-type-string)
  (jne .not-string)
  (add l0 (sizeof exp-string))
  (push x0)
  (set x0 l0)
  (set l0 .double-quote-string)
  (call print)
  (set l0 x0)
  (call print)
  (set l0 .double-quote-string)
  (call print)
  (pop x0)
  (ret)
.double-quote-string
  (1 "\"" 0)
.not-string
  (cmp l1 exp-type-symbol)
  (jne .not-symbol)
  (add l0 (sizeof exp-symbol))
  (jmp print)
.not-symbol
  (set l0 .unknown-string)
  (jmp print)
.unknown-string
  (1 "<unknown>" 0))

;; Main

(data
  fbuf (sizeof file-buffer)
  token-buf 1024
  token (sizeof token-struct))

(code main
  (call exp-init)
  (set x1 fbuf)
  (set l0 x1)
  (set l1 .boot-filename)
  (call file-open)
.loop
  (set l0 x1)
  (call exp-read)
  (cmp l0 0)
  (je .end)
  (call exp-write)
  (call newline)
  (jmp .loop)
.end
  (set l0 0)
  (jmp sys-exit)
.boot-filename
  (1 "boot.z1" 0))
